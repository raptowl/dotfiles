set_envvar_dotfiles_dir() {
  # Set environment variable DOTFILES_DIR
  # Globals:
  #   None
  # Arguments:
  #   None
  # Outputs:
  #   None
  # Returns:
  #   0
  DOTFILES_DIR="$HOME/.dotfiles"
  export DOTFILES_DIR

  return 0
}


set_envvars_common() {
  # Set common environment variables
  # Globals:
  #   None
  # Arguments:
  #   None
  # Outputs:
  #   None
  # Returns:
  #   0
  . "$DOTFILES_DIR/lib/alt_which.sh"
  alt_which

  umask 0022
  PATH="$DOTFILES_DIR/bin:$PATH"
  for l_path in "$HOME/usr/local/bin" \
                "$HOME/usr/rclone/bin" \
                "$HOME/usr/shellshoccar/bin" \
                "$HOME/usr/kotoriotoko/BIN"; do
    if [ -d "$l_path" ]; then
      PATH="$l_path:$PATH"
    fi
  done

  LANG='ja_JP.UTF-8'
  INPUTRC="$HOME/.inputrc"
  EDITOR='vi'
  if which vim > /dev/null 2>&1; then
    EDITOR='vim'
  fi
  export PATH LANG INPUTRC EDITOR

  unset l_path
  return 0
}


set_aliases() {
  # Set aliases for bash
  # Globals:
  #   None
  # Arguments:
  #   None
  # Outputs:
  #   None
  # Returns:
  #   0
  alias ..='\cd ..'
  alias ...='\cd ../..'
  alias ....='\cd ../../..'
  if ls --color > /dev/null 2>&1; then
    alias ls='ls --color=auto'
    alias lsa='ls -a'
  else
    alias ls='ls -G'
    alias lsa='ls -a'
  fi

  return 0
}


check_is_in_interactive() {
  # Check if it is in a interactive session
  # Globals:
  #   None
  # Arguments:
  #   None
  # Outputs:
  #   None
  # Returns:
  #   in a session, 0
  #   not in a session, 1
  if printf '%s' "$-" \
       | grep -e 'i' > /dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}


check_is_in_tmux() {
  # Check if it is in a tmux session
  # Globals:
  #   None
  # Arguments:
  #   None
  # Outputs:
  #   None
  # Returns:
  #   in a session, 0
  #   not in a session, 1
  if [ -n "$TMUX" ]; then
    return 0
  else
    return 1
  fi
}


check_is_in_screen() {
  # Check if it is in a GNU screen session
  # Globals:
  #   None
  # Arguments:
  #   None
  # Outputs:
  #   None
  # Returns:
  #   in a session, 0
  #   not in a session, 1
  if [ -n "$STY" ]; then
    return 0
  else
    return 1
  fi
}


choose_and_connect_ssh_host() {
  # Choose and connect a ssh host by prompt
  # Globals:
  #   None
  # Arguments:
  #   None
  # Outputs:
  #   None
  # Returns:
  #   0
  . "$DOTFILES_DIR/lib/alt_which.sh"
  alt_which

  list_ssh_hosts() {
    l_conf_path="$HOME/.ssh/config"

    if [ ! -r "$l_conf_path" ]; then
      return 1
    elif ! grep -e '^Host  *' "$l_conf_path" > /dev/null 2>&1; then
      return 1
    fi
    grep -e '^Host  *' "$l_conf_path" \
      | sed -e 's/^Host  *//'

    unset l_conf_path
    return 0
  }

  if which ssh > /dev/null 2>&1 \
       && list_ssh_hosts > /dev/null 2>&1; then
    printf "Connect local or remote?\n" > /dev/tty
    printf "If you connect local, press enter with blank.\n" > /dev/tty
    printf "If you connect remote, press enter with number.\n" > /dev/tty
    printf "\n" > /dev/tty

    l_target_host=$(list_ssh_hosts \
                      | "$DOTFILES_DIR/bin/sln")

    if [ -n "$l_target_host" ]; then
      exec ssh "$l_target_host"
    fi
    unset l_target_host
  fi

  return 0
}


attach_any_session_on_tmux() {
  # Attach any session on tmux
  # Globals:
  #   None
  # Arguments:
  #   None
  # Outputs:
  #   None
  # Returns:
  #   0
  . "$DOTFILES_DIR/lib/alt_which.sh"
  alt_which

  if which tmux > /dev/null 2>&1; then
    if tmux has-session > /dev/null 2>&1; then
      exec tmux attach
    else
      exec tmux new-session
    fi
  fi

  return 0
}


attach_any_session_on_screen() {
  # Attach any session on GNU screen
  # Globals:
  #   None
  # Arguments:
  #   None
  # Outputs:
  #   None
  # Returns:
  #   0
  . "$DOTFILES_DIR/lib/alt_which.sh"
  alt_which

  if which screen > /dev/null 2>&1; then
    if screen -list > /dev/null 2>&1; then
      exec screen -r
    else
      exec screen -S my_screen_ses
    fi
  fi

  return 0
}
